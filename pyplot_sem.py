# После того, как физик что-то рассчитал/измерил, 
# ему необходимо представить свои результаты
# чаще всего для этого приходится строить графики и диаграммы

#в Python для этого обычно используются pyplot

#давайте импортируем библиотеку
import matplotlib
import matplotlib.pyplot as plt #plt - распространенное сокращение

#Пусть у нас есть сигнал: два массива одинаковой длины - один с временем, 
# другой - с сигналом

# Смоделируем эту ситуацию с помощью библиотеки numpy

import numpy as np

#пусть длительность сигнала -  1 секунда, 
# а период дискретизации - 1 милисекунда
t = np.arange(0,1,0.001)

#сигнал будет состоять из трех гармоник частоты 50 Гц с различными амлитудами
#а также случайного шума

#создаем "чистый" сигнал:
clear_s = 150*np.sin(2*np.pi*50*t) + 100*np.sin(2*np.pi*100*t) + 50*np.sin(2*np.pi*150*t)

#добавляем шум:
sig = clear_s + np.random.uniform(-50, 50, len(t)) 
# сверху: массив случайных чисел от -50 до 50 размером len(t)
#  распредление - равномерное

#теперь, наконец-то, к отрисовке графиков

#создаем окно для отрисовки
plt.figure()

#помещаем туда график
plt.plot(t, sig)

plt.show()

#отлично, все отрисовалось!
#однако нам скорее всего захочется как-то изменить график:
#подписать оси, добавить сетку, легенду и т.д.

#Если хотим изменить шрифт:
matplotlib.rcParams.update({'font.size': 16, 'font.family':'serif'})

plt.figure()
plt.plot(t, sig, color = "red", label = "noisy")
#можно добавить в это же окно еще один график:
plt.plot(t, clear_s, color = "blue", label = "clear")



#подписываем график
plt.title("Наш замечательный график")

#подписываем оси:
plt.xlabel('t, ms', fontsize=20)
plt.ylabel('Voltage, $\\mu V_1^{cathode}$', fontsize=20)
# $ $ - позволяет делать TeX-вставки
# LaTex - среда для верстки, популярная в научной среде
# позволяет относительно несложно форматировать текст
# //mu - латинская буква "мю", "_" - говорим, что дальше будет нижний индекс
# "^" - врехний индекс (если индекс больше одного символа - заключаем его в {}) 

#включаем легенду
plt.legend(loc = "upper right")

#включаем сетку
plt.grid()

plt.show()


#Если нужно отобразить ошибки, то нужно использовать plt.errorbar

# Пусть у нас теперь есть зависимость нашего сигнала от координаты

x = np.arange(0, 10, 0.5)
ssig = 10*np.exp(-x**2/25) + np.random.uniform(0,0.2,x.size)

plt.figure()

plt.errorbar(x,ssig, yerr=0.2, linestyle = "None", marker = "*")

plt.title("Еще более замечательный график")
plt.xlabel('x, mm', fontsize=20)
plt.ylabel('Voltage, $\\mu V_1^{cathode}$', fontsize=20)

plt.grid(which="both")
#если хотим включить доп сетку, то нужно включить доп отметки
plt.minorticks_on()
plt.grid(which='minor', linestyle=':')

plt.show()

# продолжение - на следующем семинаре
pass


