import requests as req

#Изначально библиотека requests не установлена. Устаовка: pip install requests

our_cite = req.get("https://cpp-python-nsu.inp.nsk.su/textbook")

# https - используемый протокол
# cpp-python-nsu.inp.nsk.su - домен - имя нашего сайта в интернете
# textbook - адрес нужного ресурса внутри домена


print(our_cite)
print("Код состояния: ", our_cite.status_code)

#Коды:
#200 - успешное выполнение
#404 - запрашиваемый ресурс не найден на сервере
#500 - ошибка сервера (сервер не смог обработать ваш запрос)

#есть и другие коды, но общее правило такое: 2хх - успех, 4хх - неуспех, 5хх - проблемы с сервером



print(our_cite.text)

#нам распечатался html-код страницы. 
#html - язык разметки, т.е. описание для браузера, где какие элементы нужно разместить
#также эти элементы можно посмотреть в браузере в режиме разработчика

#есть специальные библиотеки, которые облегчают обработку  (парсинг) html, например, Beautiful soup
# Однако работа с ними требует базового знания HTML и выходит за рамки нашего курса 
# (на самом деле базово изучить html можно за несколько дней, так что если будет свободное время и желения, то все получится)
# 
# Некоторые web-сервисы позволяют работать с собой и без знания html
# Для этого они предоставляют API - Application Programming Interface  
# Давайте рассмотрим работу с web-сервисом через API (на лекции вам демонстрировали работу с метеосервисом) 


#работа с API идет следующим образом: 
# 1. заходим на сайт, где изучаем, какую функциональность нам предоставляет API
# 2. копируем интерисующий нас запрос
# 3. некоторые API требуют регистрации и ввода ...
# 4. Пишем нашу программу и запускаем
# 5. ???
# 6. PROFIT!

#Пример первый: numbersapi.com - предоставляет "интересные факты" о числах и датах

# Узнаем на сайте, что запрос выглядит так "http://numbersapi.com/number/type",    
#Делаем запрос:

#пусть хотим узнать интересный факт о числе 177

fact = req.get(f"http://numbersapi.com/{177}/math?json=true") #"?json=true" - хотим получить ответ в формате json - о нем далее

print(fact.text)
print(type(fact.text))

#по распечатанному выше примеру наглядно видно, что собой представляет json - словарь (но записанный как строка)
#ключи словаря - названия параметров
#занчения могут быть разные, часто это тоже словари 
#такой формат очень удобен, так как не привязан к какому либо языку программирования (хоть и уходит корнями в JS)
#как вы заметили, json может легко воспринимать и человек

#давайте сохраним наш json-ответ в файл

#создадим json-объект, используя бибилиотеку json
import json

json_obj = json.loads(fact.text)
#заметим, что bool и int автоматически определились 

#параметры можно менять
json_obj["number"] = 178
print(type(json_obj)) #т.о. json.loads - легкое превращение строки в словарь

#чтобы записать что-то в json используется метод dump, считать - load

with open("json_answ.txt", "w") as json_txt:
    json.dump(json_obj, json_txt)

with open("json_answ.txt") as json_txt:
    json_from_file = json.load(json_txt)


#давайте теперь узнаем, примечательна ли чем-то сегодняшняя дата
from datetime import date #поможет нам получить текующую дату

cur_date = date.today() #полчаем

fact = req.get(f"http://numbersapi.com/{cur_date.month}/{cur_date.day+1}/date?json=true")

print(json.loads(fact.text)["text"])


#edamam - сервис, который поможет нам подобрать рецепты из имеющихся продуктов https://www.edamam.com/
#google translate api - позволяет использовать некоторые функции google-translate (не уверен, что бесплатно)

#выше еще два API, о которых я может быть расскажу на следующем занятии
pass