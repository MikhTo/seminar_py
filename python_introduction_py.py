# Мы преодолели половину курса и теперь приступаем к python!!!
# - значок '#' обозначает начало комментария
# Начнем по классике - с Hello, World

print("Hello, World!", 10, 1.5, ' и это тоже строка, хоть и в одинарных кавычках') #функция print отвечает за вывод в консоль,
#он способен выводить как строки(например "Hello, World!"), так и числа (10, 1,5) (и на самом деле еще многие встроенные типы)
#обратите внимание на отсутствие ; в конце строки



#Переменные
var = 10 #10.1 - вещественное, 10 + 10j - комплексное  
#обратите внимание на то, что не пишем, какого типа перменная!

var1 = "some str" #строка
bvar = True #булево значение

#Python - язык с динамической типизацией
#Это означает, что мы можем присваивать переменной значения любого типа
#так var1 у нас str, давайте изменим его на комплексное число

var1 = 10+10j
# сработало!

#Так, кстати, пишется ветвление:
if var < 10: #обратите внимание на ":"!
    print("var is ls than", 10) #обратите внимание на отсутствие фигурных скобок -- вложенность определяется по отступам
elif (var == 10):
    print("var is 10")
else:
    print("var is bigger than 10")





#ввод с консоли

input_val = input("Введите какое-то число:") #обычно агрумент(строка в скобках) не переджается
#передаем, когда хотим вывести какое-то сообщение перед вводом

#давайте узнаем тип введенного значения:
print(type(input_val)) #считывается строка, но мы можем привести ее к другим типам

print(int(input_val)+int(input_val))#приводим число к int'у

#число тоже Можно привести к строке:
print(input_val+str(100))#стройки, кстати, можно складывать



#Обсудим, как создавать функции
def fun(var):
    print("я приняла перменную и распечатала ее: ", var)

def bar(var):
    print("а я принимаю перменную, возвожу в квадрат и возвращаю")
    return var*var #можно возвращать несколько значений через запятую

fun(var)
var = bar(var)



#Давайте обсудим контейнеры

#list (список) -- наверное самый популярный контейнер
some_list =[-10, 1.1, 12, "13", [14, 15]] #хранить можно значения разных типов

#доступ - через []

print(some_list[2])

#список обладает внушительным арсеналом методов, давайте рассмотрим некоторые из них

#снимает последний элемент
some_list.pop()
#при этом не просто снимает, но и ввозвращает!
popped_element = some_list.pop()

#можно и добалять элементы
some_list.append(100500)

#получить индекс элемента
indx = some_list.index(-10)#можно искать не о всему списку, а по его части

some_list.reverse() #название говорит само за себя

some_list.sort()#сортировка

#можно сортировать в обратном порядке
some_list.sort(reverse=True) #т.е. передаем в функцию именнованный параметр

#можно сортировать не по значению, а по результату функции, в которую передается это значение
some_list.sort(key=lambda x: abs(x))
# т.е. лямбда функция имеет следующий синтаксис
# lambda - обозначаем, что сейчас начнется лябмда функция
# затем идет набор аргументов (в нашем случае x)
# после : пишем, что хотим вернуть (в нашем случае -- модуль аргумента)

#еще пример
some_list.sort(key=lambda x: abs(x) < 100)
#сначало идут элементы, для которых лямбда вернет False

#Рассмотрите и другие методы: count, insert, remove и т.д.


#tuple (кортеж)
some_tuple = ("allo", (), 1, 10)#

#нельзя менять значения:
# some_tuple[0] = 10 -- #приведет к ошибке!

#dict (словарь) - аналог map - тоже весьма популярный контейнер
some_dict = {"key1":"first value", "key2":2, "key3": ["списочек в словарике"]}

#обращение по ключу
some_dict["key1"] = "changed value"

#добавляем новую пару ключ-значение
some_dict["key4"] = "new item"

#А вот так нельзя:
#some_dict["key5"] += "don't try it!"

#есть методы для того, чтобы получить ключи и значения из словаря по отдельности

print("вот ключи: ", some_dict.keys())
print("вот значения:", some_dict.values())

#последний контейнер, который мы рассмотрим - set
some_set = set([1000, 100, 10, 1, 1, 1, 1])

#Обсудим срезы - спсособ получить часть списка

list_to_slice = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(list_to_slice[3::]) #от 3-го (считаем с нуля!) элемента до конца
print(list_to_slice[2:9:]) #от 2-го до 9 невключительно
print(list_to_slice[0:10:2]) # элементы с шагом 2
print(list_to_slice[-1]) #последний элемент (добавляем минус -- считаем с конца)
print(list_to_slice[10:0:-2]) #элементы с шагом 2 в обратном порядке
# P.S. последним способом можно вывести все элементы в обратном порядке

#теперь про цикл for 
new_list = []
for element in list_to_slice: # в цикле пробегаются все элементы
    new_list.append(element**2) # ** - возведение в степень

for i in range(0, 10): #если хотим пройтись по индексам от 0 до 10 (не включительно), то используем range
    list_to_slice[i] = 1/list_to_slice[i]


# ну и наконец про то, как быстро создать список

#list comprehension

comp_list = [str(i)*i for i in range(0, 10)]

#dict comprehension

comph_dict = {str(i):i for i in range(0, 10)}

#можно добавлять условие

comp_list = [i for i in range(0, 10) if i%2 == 0]

comp_list = [i if i%2 == 0 else i - i%2 for i in range(0,len(comp_list))] # len - длина всего, что имеет длину (list, dict and etc.)

pass
